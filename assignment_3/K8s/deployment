#! /bin/bash

# Check if kubectl is installed
if ! [ -x "$(command -v kubectl)" ]; then
  echo 'Error: kubectl is not installed.' >&2
  exit 1
fi

# Check script argument (up or down)
if [ "$1" != "up" ] && [ "$1" != "down" ]; then
    echo "Usage: $0 up|down"
    exit 1
fi

cni_manifest_url=https://docs.projectcalico.org/manifests/calico.yaml
ingress_controller_manifest_url=https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.0/deploy/static/provider/cloud/deploy.yaml

cd "$(dirname "$0")"

# Set up
if [ "$1" == "up" ]; then
    set -e
    echo "Setting up CNI..."
    kubectl apply -f $cni_manifest_url
    echo "Waiting for CNI to be ready..."
    sleep 5
    kubectl wait --for=condition=ready pod -l k8s-app=calico-node -n kube-system --timeout=120s
    #echo "Setting up ingress controller..."
    #kubectl apply -f $ingress_controller_manifest_url
    #echo "Waiting for ingress controller to be ready..."
    # sleep 5
    # kubectl wait --namespace ingress-nginx \
    #     --for=condition=ready pod \
    #     --selector=app.kubernetes.io/component=controller \
    #     --timeout=120s
    echo "Creating resources..."
    for file in $(ls *.yaml); do
        kubectl apply -f $file
    done
else # Tear down
    echo "Deleting resources..."
    for file in $(ls *.yaml); do
        kubectl delete -f $file 2>/dev/null || echo "No resources to delete for $file"
    done
    # Keep the ingress controller running, so it doesn't take as much time to recreate the deployment
    # echo "Deleting ingress controller..."
    # kubectl delete -f $ingress_controller_manifest_url
    # echo "Deleting CNI..."
    # kubectl delete -f $cni_manifest_url
fi

echo -e "\nCluster resources:"
kubectl get all

echo -e "\nDone"
